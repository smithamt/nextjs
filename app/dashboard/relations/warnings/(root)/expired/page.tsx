import LastElement from "@/components/lastelement";
import ExportBtn from "@/components/page";
import EmployeeProfile from "@/components/profile/page";
import connectMongo from "@/config/mongo";
import { getEmployeeQuery } from "@/data/employees";
import { cn } from "@/lib/utils";
import EmployeeModel from "@/models/employees/model";
import WarningModel from "@/models/warnings/model";
import { WarningType } from "@/types";
import moment from "moment";
import { Metadata } from "next";

export const metadata: Metadata = {
  title: "Leave request",
  description: "Generated by create next app",
  icons: {
    icon: "/vite.svg",
  },
};

async function RelationsWarningsPublished({
  searchParams,
}: {
  searchParams: { [key: string]: string | string[] | undefined };
}) {
  await connectMongo();
  const { status, startDate, endDate, size = 10, page = 1 } = searchParams;
  const empQuery = await getEmployeeQuery(searchParams, "warnings");
  const employees = await EmployeeModel.find(empQuery).select("id");
  const limit = Number(size) * Number(page);

  const query: any = {
    isPublic: true,
    employee: { $in: employees.map((e) => e._id) },
  };

  if (startDate && endDate) {
    query.createdAt = {
      $gte: new Date(startDate as string),
      $lte: new Date(endDate as string),
    };
  }

  if (status === "pending") query.status = "pending";

  const data = (await WarningModel.find()
    .sort({ createdAt: -1 })
    .populate("employee", "name nickname profile employeeId")
    .limit(limit)) as WarningType[];

  const count = await WarningModel.countDocuments();

  return (
    <div className="w-full h-full">
      <div className="py-2 flex items-center justify-between px-8">
        <div>
          <p className="font-bold text-lg">Warning {count}</p>
          <p className="text-xs inactive-text">Manage all employee warnings.</p>
        </div>
        <div className="flex items-center space-x-2">
          <ExportBtn data={JSON.stringify(data)} title={"warnings"} />
        </div>
      </div>
      <div className="gap-4 p-4 flex flex-wrap">
        {data.map((l, k) => {
          return (
            <div
              key={k}
              className={cn(
                "mb-1 p-4 flex transition-all duration-75 ease-in-out flex-row justify-between flex-1 min-w-[300px] hover:shadow-lg rounded-sm",
                l.status === "pending" ? "nav-bg nav-hover" : "hover"
              )}
            >
              <EmployeeProfile
                description={l.title}
                employee={l.employee}
                ago={moment(l.createdAt).fromNow()}
                to={`/dashboard/relations/warnings/detail/${l._id}`}
              />
              <p className="h-4 capitalize text-xs">{l.status}</p>
            </div>
          );
        })}
        {count > data.length && (
          <div className="w-full h-10">
            <LastElement count={count} data={data.length} />
          </div>
        )}
      </div>
    </div>
  );
}

export default RelationsWarningsPublished;
