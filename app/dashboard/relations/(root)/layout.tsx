import { relationroutes } from "@/constants/routes/relations";
import { requestroutes } from "@/constants/routes/requests";
import { getRole } from "@/data/user";
import LeaveRequestModel from "@/models/leaverequests/model";
import WarningModel from "@/models/warnings/model";
import { roles } from "@/roles";
import { TitleType } from "@/types";
import { Metadata } from "next";
import { headers } from "next/headers";
import { ReactNode } from "react";
import RelationHeader from "./_components/header";
import RelationSidebar from "./_components/sidebar";

export const metadata: Metadata = {
  title: "Relations",
  description: "Generated by create next app",
  icons: {
    icon: "/vite.svg",
  },
};

async function RootRequestLayout({ children }: { children: ReactNode }) {
  const role = await getRole();
  const requestHeaders = headers();
  const pathname = requestHeaders.get("x-pathname") || "";
  const state = pathname.split("/")[3] as TitleType;

  const getRR = async () => {
    const routes = await Promise.all(
      relationroutes.map(async (route) => {
        if (route.name === "warnings") {
          const warningCount = await WarningModel.countDocuments({
            status: "pending",
          });
          return { ...route, noti: warningCount };
        }
        return route;
      })
    );
    return routes;
  };

  const getRE = async () => {
    const routes = await Promise.all(
      requestroutes.map(async (route) => {
        if (route.name === "leaveRequests") {
          const leaveRequestsCount = await LeaveRequestModel.countDocuments({
            status: "pending",
          });
          return { ...route, noti: leaveRequestsCount };
        }
        return route;
      })
    );
    return routes;
  };

  const rfn = getRR();
  const efn = getRE();

  const [r, e] = await Promise.all([rfn, efn]);

  const ee = e.filter((i) => {
    const foundRole = roles.find((r) => r.name === role);
    return foundRole && foundRole[i.name];
  });

  const rr = r.filter((i) => {
    const foundRole = roles.find((r) => r.name === role);
    return foundRole && foundRole[i.name];
  });

  return (
    <>
      <div className="h-screen w-full">
        <RelationHeader state={state} />
        <div className="flex h-[calc(100%-60px)] w-full">
          <RelationSidebar relationroutes={rr} requestroutes={ee} />
          {children}
        </div>
      </div>
    </>
  );
}

export default RootRequestLayout;
